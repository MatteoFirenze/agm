/*import_begin*/
import { Component, ContentChildren, Input, } from '@angular/core';
/*import_end*/
import { ColumnComponent } from './column.component';
import * as GC from '@grapecity/spread-sheets';
import * as i0 from "@angular/core";
/*code_begin*/
export class WorksheetComponent {
    constructor() {
        this.sheet = new GC.Spread.Sheets.Worksheet('');
    }
    onAttached() {
        const sheet = this.sheet;
        const columns = this.columns;
        sheet.suspendPaint();
        sheet.suspendEvent();
        if (this.dataSource) {
            sheet.setDataSource(this.dataSource);
            columns.forEach((columnComponent, index) => {
                if (columnComponent.dataField) {
                    sheet.bindColumn(index, {
                        name: columnComponent.dataField,
                        displayName: columnComponent.headerText,
                    });
                }
            });
        }
        if (columns.length > 0) {
            sheet.setColumnCount(columns.length);
            columns.forEach((columnComponent, index) => {
                columnComponent.onAttached(this.sheet, index);
            });
        }
        sheet.resumeEvent();
        sheet.resumePaint();
    }
    getSheet() {
        return this.sheet;
    }
    ngOnChanges(changes) {
        const sheet = this.sheet;
        sheet.suspendPaint();
        sheet.suspendEvent();
        for (const changeName in changes) {
            const newValue = changes[changeName].currentValue;
            if (newValue === null || newValue === void 0) {
                continue;
            }
            switch (changeName) {
                case 'rowCount':
                    sheet.setRowCount(newValue);
                    break;
                case 'colCount':
                    sheet.setColumnCount(newValue);
                    break;
                case 'name':
                    sheet.name(newValue);
                    break;
                case 'frozenColumnCount':
                    sheet.frozenColumnCount(newValue);
                    break;
                case 'frozenRowCount':
                    sheet.frozenRowCount(newValue);
                    break;
                case 'frozenTrailingRowCount':
                    sheet.frozenTrailingRowCount(newValue);
                    break;
                case 'frozenTrailingColumnCount':
                    sheet.frozenTrailingColumnCount(newValue);
                    break;
                case 'selectionPolicy':
                    sheet.selectionPolicy(newValue);
                    break;
                case 'selectionUnit':
                    sheet.selectionUnit(newValue);
                    break;
                case 'zoom':
                    sheet.zoom(newValue);
                    break;
                case 'currentTheme':
                    sheet.currentTheme(newValue);
                    break;
                case 'defaultStyle':
                    sheet.setDefaultStyle(newValue);
                    break;
                case 'rowOutlineInfo':
                    newValue.forEach((item) => {
                        sheet.rowOutlines.group(item.index, item.count);
                    });
                    sheet.repaint();
                    break;
                case 'columnOutlineInfo':
                    newValue.forEach((item) => {
                        sheet.columnOutlines.group(item.index, item.count);
                    });
                    sheet.repaint();
                    break;
                case 'showRowOutline':
                    sheet.showRowOutline(newValue);
                    break;
                case 'showColumnOutline':
                    sheet.showColumnOutline(newValue);
                    break;
                case 'dataSource':
                    sheet.setDataSource(newValue);
                    break;
                case 'autoGenerateColumns':
                    sheet[changeName] = newValue;
                default:
                    sheet.options[changeName] = newValue;
            }
        }
        sheet.resumeEvent();
        sheet.resumePaint();
    }
    ngAfterViewInit() {
        this.columns.changes.subscribe(() => { this.onAttached(); });
    }
    ngOnDestroy() {
        const sheet = this.sheet;
        const spread = sheet ? sheet.getParent() : null;
        if (spread) {
            const sheetIndex = spread.getSheetIndex(sheet.name());
            if (sheetIndex !== void 0) {
                spread.removeSheet(sheetIndex);
            }
        }
    }
}
WorksheetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: WorksheetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
WorksheetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.4.0", type: WorksheetComponent, selector: "gc-worksheet", inputs: { rowCount: "rowCount", colCount: "colCount", dataSource: "dataSource", name: "name", frozenColumnCount: "frozenColumnCount", frozenRowCount: "frozenRowCount", frozenTrailingRowCount: "frozenTrailingRowCount", frozenTrailingColumnCount: "frozenTrailingColumnCount", allowCellOverflow: "allowCellOverflow", frozenlineColor: "frozenlineColor", sheetTabColor: "sheetTabColor", selectionPolicy: "selectionPolicy", selectionUnit: "selectionUnit", zoom: "zoom", currentTheme: "currentTheme", clipBoardOptions: "clipBoardOptions", rowHeaderVisible: "rowHeaderVisible", colHeaderVisible: "colHeaderVisible", rowHeaderAutoText: "rowHeaderAutoText", colHeaderAutoText: "colHeaderAutoText", rowHeaderAutoTextIndex: "rowHeaderAutoTextIndex", colHeaderAutoTextIndex: "colHeaderAutoTextIndex", isProtected: "isProtected", showRowOutline: "showRowOutline", showColumnOutline: "showColumnOutline", selectionBackColor: "selectionBackColor", selectionBorderColor: "selectionBorderColor", defaultStyle: "defaultStyle", rowOutlineInfo: "rowOutlineInfo", columnOutlineInfo: "columnOutlineInfo", autoGenerateColumns: "autoGenerateColumns" }, queries: [{ propertyName: "columns", predicate: ColumnComponent }], usesOnChanges: true, ngImport: i0, template: `
        <ng-content></ng-content>
    `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: WorksheetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gc-worksheet',
                    template: `
        <ng-content></ng-content>
    `,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { columns: [{
                type: ContentChildren,
                args: [ColumnComponent]
            }], rowCount: [{
                type: Input
            }], colCount: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], name: [{
                type: Input
            }], frozenColumnCount: [{
                type: Input
            }], frozenRowCount: [{
                type: Input
            }], frozenTrailingRowCount: [{
                type: Input
            }], frozenTrailingColumnCount: [{
                type: Input
            }], allowCellOverflow: [{
                type: Input
            }], frozenlineColor: [{
                type: Input
            }], sheetTabColor: [{
                type: Input
            }], selectionPolicy: [{
                type: Input
            }], selectionUnit: [{
                type: Input
            }], zoom: [{
                type: Input
            }], currentTheme: [{
                type: Input
            }], clipBoardOptions: [{
                type: Input
            }], rowHeaderVisible: [{
                type: Input
            }], colHeaderVisible: [{
                type: Input
            }], rowHeaderAutoText: [{
                type: Input
            }], colHeaderAutoText: [{
                type: Input
            }], rowHeaderAutoTextIndex: [{
                type: Input
            }], colHeaderAutoTextIndex: [{
                type: Input
            }], isProtected: [{
                type: Input
            }], showRowOutline: [{
                type: Input
            }], showColumnOutline: [{
                type: Input
            }], selectionBackColor: [{
                type: Input
            }], selectionBorderColor: [{
                type: Input
            }], defaultStyle: [{
                type: Input
            }], rowOutlineInfo: [{
                type: Input
            }], columnOutlineInfo: [{
                type: Input
            }], autoGenerateColumns: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NoZWV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3Jrc2hlZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQUNoQixPQUFPLEVBRUwsU0FBUyxFQUNULGVBQWUsRUFDZixLQUFLLEdBSU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsY0FBYztBQUNkLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEtBQUssRUFBRSxNQUFNLDBCQUEwQixDQUFDOztBQUMvQyxjQUFjO0FBT2QsTUFBTSxPQUFPLGtCQUFrQjtJQXNDN0I7UUFDRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxVQUFVO1FBQ2YsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN6QixNQUFNLE9BQU8sR0FBSSxJQUFJLENBQUMsT0FBc0MsQ0FBQztRQUM3RCxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDckIsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNyQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZ0MsRUFBRSxLQUFhLEVBQUUsRUFBRTtnQkFDbEUsSUFBSSxlQUFlLENBQUMsU0FBUyxFQUFFO29CQUM3QixLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRTt3QkFDdEIsSUFBSSxFQUFFLGVBQWUsQ0FBQyxTQUFTO3dCQUMvQixXQUFXLEVBQUUsZUFBZSxDQUFDLFVBQVU7cUJBQ3hDLENBQUMsQ0FBQztpQkFDSjtZQUNILENBQUMsQ0FBQyxD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QkFBa0I7c0JBQWpDLEtBQUs7Z0JBQ1Usb0JBQW9CO3NCQUFuQyxLQUFLO2dCQUNVLFlBQVk7c0JBQTNCLEtBQUs7Z0JBQ1UsY0FBYztzQkFBN0IsS0FBSztnQkFDVSxpQkFBaUI7c0JBQWhDLEtBQUs7Z0JBQ1UsbUJBQW1CO3NCQUFsQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyppbXBvcnRfYmVnaW4qL1xyXG5pbXBvcnQge1xyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbnRlbnRDaGlsZHJlbixcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcyxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLyppbXBvcnRfZW5kKi9cclxuaW1wb3J0IHsgQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW4uY29tcG9uZW50JztcclxuaW1wb3J0ICogYXMgR0MgZnJvbSAnQGdyYXBlY2l0eS9zcHJlYWQtc2hlZXRzJztcclxuLypjb2RlX2JlZ2luKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYy13b3Jrc2hlZXQnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgYCxcclxufSlcclxuZXhwb3J0IGNsYXNzIFdvcmtzaGVldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgcHJpdmF0ZSBzaGVldDogR0MuU3ByZWFkLlNoZWV0cy5Xb3Jrc2hlZXQ7XHJcbiAgQENvbnRlbnRDaGlsZHJlbihDb2x1bW5Db21wb25lbnQpXHJcbiAgcHVibGljIGNvbHVtbnM/OiBRdWVyeUxpc3Q8Q29sdW1uQ29tcG9uZW50PjtcclxuXHJcbiAgLy8gaW5kaWNhdGUgYWxsIGlucHV0c1xyXG4gIEBJbnB1dCgpIHB1YmxpYyByb3dDb3VudD86IG51bWJlcjtcclxuICBASW5wdXQoKSBwdWJsaWMgY29sQ291bnQ/OiBudW1iZXI7XHJcbiAgQElucHV0KCkgcHVibGljIGRhdGFTb3VyY2U6IGFueTtcclxuICBASW5wdXQoKSBwdWJsaWMgbmFtZT86IHN0cmluZztcclxuICBASW5wdXQoKSBwdWJsaWMgZnJvemVuQ29sdW1uQ291bnQ/OiBudW1iZXI7XHJcbiAgQElucHV0KCkgcHVibGljIGZyb3plblJvd0NvdW50PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBmcm96ZW5UcmFpbGluZ1Jvd0NvdW50PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBmcm96ZW5UcmFpbGluZ0NvbHVtbkNvdW50PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBhbGxvd0NlbGxPdmVyZmxvdz86IGJvb2xlYW47XHJcbiAgQElucHV0KCkgcHVibGljIGZyb3plbmxpbmVDb2xvcj86IHN0cmluZztcclxuICBASW5wdXQoKSBwdWJsaWMgc2hlZXRUYWJDb2xvcj86IHN0cmluZztcclxuICBASW5wdXQoKSBwdWJsaWMgc2VsZWN0aW9uUG9saWN5PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBzZWxlY3Rpb25Vbml0PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyB6b29tPzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBjdXJyZW50VGhlbWU/OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgcHVibGljIGNsaXBCb2FyZE9wdGlvbnM/OiBudW1iZXI7XHJcbiAgQElucHV0KCkgcHVibGljIHJvd0hlYWRlclZpc2libGU/OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBjb2xIZWFkZXJWaXNpYmxlPzogYm9vbGVhbjtcclxuICBASW5wdXQoKSBwdWJsaWMgcm93SGVhZGVyQXV0b1RleHQ/OiBudW1iZXI7XHJcbiAgQElucHV0KCkgcHVibGljIGNvbEhlYWRlckF1dG9UZXh0PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyByb3dIZWFkZXJBdXRvVGV4dEluZGV4PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBjb2xIZWFkZXJBdXRvVGV4dEluZGV4PzogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBpc1Byb3RlY3RlZD86IGJvb2xlYW47XHJcbiAgQElucHV0KCkgcHVibGljIHNob3dSb3dPdXRsaW5lPzogYm9vbGVhbjtcclxuICBASW5wdXQoKSBwdWJsaWMgc2hvd0NvbHVtbk91dGxpbmU/OiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBzZWxlY3Rpb25CYWNrQ29sb3I/OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgcHVibGljIHNlbGVjdGlvbkJvcmRlckNvbG9yPzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBkZWZhdWx0U3R5bGU/OiBHQy5TcHJlYWQuU2hlZXRzLlN0eWxlO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyByb3dPdXRsaW5lSW5mbz86IGFueVtdO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBjb2x1bW5PdXRsaW5lSW5mbz86IGFueVtdO1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBhdXRvR2VuZXJhdGVDb2x1bW5zPzogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnNoZWV0ID0gbmV3IEdDLlNwcmVhZC5TaGVldHMuV29ya3NoZWV0KCcnKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvbkF0dGFjaGVkKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0O1xyXG4gICAgY29uc3QgY29sdW1ucyA9ICh0aGlzLmNvbHVtbnMgYXMgUXVlcnlMaXN0PENvbHVtbkNvbXBvbmVudD4pO1xyXG4gICAgc2hlZXQuc3VzcGVuZFBhaW50KCk7XHJcbiAgICBzaGVldC5zdXNwZW5kRXZlbnQoKTtcclxuICAgIGlmICh0aGlzLmRhdGFTb3VyY2UpIHtcclxuICAgICAgc2hlZXQuc2V0RGF0YVNvdXJjZSh0aGlzLmRhdGFTb3VyY2UpO1xyXG4gICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbkNvbXBvbmVudDogQ29sdW1uQ29tcG9uZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbHVtbkNvbXBvbmVudC5kYXRhRmllbGQpIHtcclxuICAgICAgICAgIHNoZWV0LmJpbmRDb2x1bW4oaW5kZXgsIHtcclxuICAgICAgICAgICAgbmFtZTogY29sdW1uQ29tcG9uZW50LmRhdGFGaWVsZCxcclxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IGNvbHVtbkNvbXBvbmVudC5oZWFkZXJUZXh0LFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChjb2x1bW5zLmxlbmd0aCA+IDApIHtcclxuICAgICAgc2hlZXQuc2V0Q29sdW1uQ291bnQoY29sdW1ucy5sZW5ndGgpO1xyXG4gICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbkNvbXBvbmVudDogQ29sdW1uQ29tcG9uZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgY29sdW1uQ29tcG9uZW50Lm9uQXR0YWNoZWQodGhpcy5zaGVldCwgaW5kZXgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHNoZWV0LnJlc3VtZUV2ZW50KCk7XHJcbiAgICBzaGVldC5yZXN1bWVQYWludCgpO1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0U2hlZXQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBjb25zdCBzaGVldCA9IHRoaXMuc2hlZXQ7XHJcbiAgICBzaGVldC5zdXNwZW5kUGFpbnQoKTtcclxuICAgIHNoZWV0LnN1c3BlbmRFdmVudCgpO1xyXG4gICAgZm9yIChjb25zdCBjaGFuZ2VOYW1lIGluIGNoYW5nZXMpIHtcclxuICAgICAgY29uc3QgbmV3VmFsdWUgPSBjaGFuZ2VzW2NoYW5nZU5hbWVdLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgaWYgKG5ld1ZhbHVlID09PSBudWxsIHx8IG5ld1ZhbHVlID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBzd2l0Y2ggKGNoYW5nZU5hbWUpIHtcclxuICAgICAgICBjYXNlICdyb3dDb3VudCc6XHJcbiAgICAgICAgICBzaGVldC5zZXRSb3dDb3VudChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjb2xDb3VudCc6XHJcbiAgICAgICAgICBzaGVldC5zZXRDb2x1bW5Db3VudChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICduYW1lJzpcclxuICAgICAgICAgIHNoZWV0Lm5hbWUobmV3VmFsdWUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZnJvemVuQ29sdW1uQ291bnQnOlxyXG4gICAgICAgICAgc2hlZXQuZnJvemVuQ29sdW1uQ291bnQobmV3VmFsdWUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZnJvemVuUm93Q291bnQnOlxyXG4gICAgICAgICAgc2hlZXQuZnJvemVuUm93Q291bnQobmV3VmFsdWUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZnJvemVuVHJhaWxpbmdSb3dDb3VudCc6XHJcbiAgICAgICAgICBzaGVldC5mcm96ZW5UcmFpbGluZ1Jvd0NvdW50KG5ld1ZhbHVlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2Zyb3plblRyYWlsaW5nQ29sdW1uQ291bnQnOlxyXG4gICAgICAgICAgc2hlZXQuZnJvemVuVHJhaWxpbmdDb2x1bW5Db3VudChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzZWxlY3Rpb25Qb2xpY3knOlxyXG4gICAgICAgICAgc2hlZXQuc2VsZWN0aW9uUG9saWN5KG5ld1ZhbHVlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3NlbGVjdGlvblVuaXQnOlxyXG4gICAgICAgICAgc2hlZXQuc2VsZWN0aW9uVW5pdChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd6b29tJzpcclxuICAgICAgICAgIHNoZWV0Lnpvb20obmV3VmFsdWUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY3VycmVudFRoZW1lJzpcclxuICAgICAgICAgIHNoZWV0LmN1cnJlbnRUaGVtZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdkZWZhdWx0U3R5bGUnOlxyXG4gICAgICAgICAgc2hlZXQuc2V0RGVmYXVsdFN0eWxlKG5ld1ZhbHVlKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3Jvd091dGxpbmVJbmZvJzpcclxuICAgICAgICAgIG5ld1ZhbHVlLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBzaGVldC5yb3dPdXRsaW5lcy5ncm91cChpdGVtLmluZGV4LCBpdGVtLmNvdW50KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2hlZXQucmVwYWludCgpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY29sdW1uT3V0bGluZUluZm8nOlxyXG4gICAgICAgICAgbmV3VmFsdWUuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHNoZWV0LmNvbHVtbk91dGxpbmVzLmdyb3VwKGl0ZW0uaW5kZXgsIGl0ZW0uY291bnQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzaGVldC5yZXBhaW50KCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzaG93Um93T3V0bGluZSc6XHJcbiAgICAgICAgICBzaGVldC5zaG93Um93T3V0bGluZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzaG93Q29sdW1uT3V0bGluZSc6XHJcbiAgICAgICAgICBzaGVldC5zaG93Q29sdW1uT3V0bGluZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdkYXRhU291cmNlJzpcclxuICAgICAgICAgIHNoZWV0LnNldERhdGFTb3VyY2UobmV3VmFsdWUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYXV0b0dlbmVyYXRlQ29sdW1ucyc6XHJcbiAgICAgICAgICBzaGVldFtjaGFuZ2VOYW1lXSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAoc2hlZXQub3B0aW9ucyBhcyBhbnkpW2NoYW5nZU5hbWVdID0gbmV3VmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHNoZWV0LnJlc3VtZUV2ZW50KCk7XHJcbiAgICBzaGVldC5yZXN1bWVQYWludCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICh0aGlzLmNvbHVtbnMgYXMgUXVlcnlMaXN0PENvbHVtbkNvbXBvbmVudD4pLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHsgdGhpcy5vbkF0dGFjaGVkKCk7IH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xyXG4gICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0O1xyXG4gICAgY29uc3Qgc3ByZWFkID0gc2hlZXQgPyBzaGVldC5nZXRQYXJlbnQoKSA6IG51bGw7XHJcbiAgICBpZiAoc3ByZWFkKSB7XHJcbiAgICAgIGNvbnN0IHNoZWV0SW5kZXggPSBzcHJlYWQuZ2V0U2hlZXRJbmRleChzaGVldC5uYW1lKCkpO1xyXG4gICAgICBpZiAoc2hlZXRJbmRleCAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgc3ByZWFkLnJlbW92ZVNoZWV0KHNoZWV0SW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbi8qY29kZV9lbmQqL1xyXG4iXX0=